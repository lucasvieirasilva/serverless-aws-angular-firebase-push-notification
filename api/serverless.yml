# serverless.yml
service: ng-fcm

plugins:
  - serverless-webpack
  - serverless-hooks-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  variables: ${file(./config.yml)}
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: false
  hooks:
    after:aws:deploy:finalize:cleanup:
      - ./../client/scripts/setup.sh
    before:aws:deploy:deploy:validateTemplate:
      - ./scripts/create_sns_application.sh ${opt:firebase_api_key, self:custom.variables.firebase_api_key}
    after:remove:remove:
      - ./scripts/delete_sns_application.sh ${opt:region, self:custom.variables.region}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  timeout: 30
  memorySize: 128
  region: ${opt:region, self:custom.variables.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'
    -
      Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: { "Fn::Join" : ["",["arn:aws:dynamodb:",{"Ref":"AWS::Region"},":*:*"]] }

functions:
  createUser:
    handler: src/user/create.main
    events:
      - http:
          path: /user
          method: post
          cors: true
          authorizer: aws_iam
              
  preSignUp:
    handler: src/user/confirm.main
    events:
      - cognitoUserPool:
          pool: NgFcm
          trigger: PreSignUp
  
resources:
  Resources:
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "NgFcmUsers"
        AttributeDefinitions:
          - AttributeName: identityId
            AttributeType: S
        KeySchema:
          - AttributeName: identityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # Cognito - User Pool
    CognitoUserPoolNgFcm:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ng-fcm-user-pool
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true

    AngularAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        GenerateSecret: false
        RefreshTokenValidity: 200
        UserPoolId:
          Ref: CognitoUserPoolNgFcm

    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ng_fcm_api_identity_pool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: AngularAppClient
            ProviderName:
              Fn::GetAtt: CognitoUserPoolNgFcm.ProviderName
        SupportedLoginProviders:
          graph.facebook.com: ${self:custom.variables.facebook_app_id}
          accounts.google.com: ${self:custom.variables.google_app_id}

    IdentityPoolUnAuthRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": 
                    Ref: IdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoIdentityPoolUnAuthPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    IdentityPoolAuthRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Path: "/"
        Policies:
          - PolicyName: CognitoIdentityPoolAuthPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: { "Fn::Join" : ["", ["arn:aws:execute-api:",{"Ref":"AWS::Region"},":",{"Ref":"AWS::AccountId"},":",{"Ref":"ApiGatewayRestApi"},"/*"]] }

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - IdentityPoolAuthRole
              - Arn
          unauthenticated:
            Fn::GetAtt:
              - IdentityPoolUnAuthRole
              - Arn
  Outputs:
    UserPoolId:
      Description: "The ID of the user pool that is created."
      Value:
        Ref: CognitoUserPoolNgFcm

    AngularAppClientId:
      Description: "The ID of the user pool react app client id."
      Value:
        Ref: AngularAppClient

    IdentityPoolId:
      Description: "The ID of the identity pool that is created."
      Value:
        Ref: IdentityPool

    FacebookAppId:
      Description: "Facebook App Id"
      Value: ${self:custom.variables.facebook_app_id}

    GoogleAppId:
      Description: "Google App Id"
      Value: ${self:custom.variables.google_app_id}